input {
  beats {
    port => 5044
  }
}

filter {
  grok {
    match => ["source","%{GREEDYDATA}/%{GREEDYDATA:nombreindex}\.csv"]
  }
  # remove special characters removal for index name building
  mutate {
    gsub => [ "nombreindex", "-", ""]
    gsub => [ "nombreindex", "\_", ""]
    gsub => [ "nombreindex", "\.", ""]
    gsub => [ "nombreindex", " ", ""]
    #gsub => [ "nombreindex", "\#", ""]
    #gsub => [ "nombreindex", "\?", ""]
    #gsub => [ "nombreindex", "\<", ""]
    #gsub => [ "nombreindex", "\>", ""]
    #gsub => [ "nombreindex", "\|", ""]
    #gsub => [ "nombreindex", '\"', ""]
    #gsub => [ "nombreindex", "\", ""]
    #gsub => [ "nombreindex", "\/", ""]

    lowercase => [ "nombreindex" ]
  }
  # parsing csv with dns log structure in folder /csvtoparse/dns
  if [log_type] == "dns" {
    csv {
      separator => ","
      columns => ["pais_","aplicacion","event_date","host","clon","fec_operacion","operation","ip_server","ip_client","port_client","request","request_type","message","pais","tipo","app","fecha"]
      skip_header => true
    }
    #grok {
      #match => { "message" => "%{WORD:pais}?,%{WORD:aplicacion}?,%{TIMESTAMP_ISO8601:event_date}?,%{WORD:host}?,%{HOSTNAME:clon}?,%{TIMESTAMP_ISO8601:fec_operacion}?,%{WORD:operation}?,%{IPV4:ip_server}?,%{IPV4:ip_client}?,%{POSINT:port_client}?,%{HOSTNAME:request}?,(?<requesttype>\b[0-9A-Za-z\.\-\:]{0,62}\b)?,%{GREEDYDATA:message}?"
      #}
    #}
    date {
      match => [ "fec_operacion", "yyyy-MM-dd' 'HH:mm:ss'.'SSSSSSSSS" ]
      target => "fec_operacion"
    }
  # parsing csv with proxy log structure in folder /csvtoparse/proxy
  if [log_type] == "proxy" {
    csv {
      separator => ","
      columns => ["country","aplicacion","event_date","host","clon","fec_operacion","ip_client","user","referer","cod_response","method","content_type","uri_host","port","uri_path","user_agent","bytes_response","bytes_request","message","pais","tipo","app","fecha"]
      skip_header => true
    }
    date {
      match => [ "fec_operacion", "yyyy-MM-dd' 'HH:mm:ss'.'SSSSSSSSS" ]
      target => "fec_operacion"
    }
  }
  # parsing csv with dcwindows log structure in folder /csvtoparse/dcwindows
  if [log_type] == "dc" {
    mutate {
      gsub => [ 'message', '\"', '' ]
      #gsub => [ "message", "-", ""]
      #gsub => [ "message", "\_", ""]
      #gsub => [ "message", "\.", ""]
      #gsub => [ "message", " ", ""]
      gsub => [ "message", "\#", ""]
      gsub => [ "message", "\?", ""]
      gsub => [ "message", "\<", ""]
      gsub => [ "message", "\>", ""]
      gsub => [ "message", "\|", ""]
      #gsub => [ "message", '\\\', "..."]
      gsub => [ "message", "\/", ""]
    }
    csv {
      separator => ","
      columns => ["pais_","aplicacion","event_date","host","clon","fec_operacion","cod_operation","operation","category","host_ip","user","user_domain","source_address","tipo_sesion","id_sesion","message","affected_user","affected_user_domain","old_account_name","nombre_sesion","process_name","error_code","error_status","error_substatus","source_hostname","source_port","target_server","privileges","affected_group","affected_group_domain","affected_task","object_type","object_name","handle_id","resources_attributes","req_accesses","affected_rights","service_file_name","service_type","service_account","parsed_op","pais","tipo","app","fecha"]
      skip_header => true
      skip_empty_columns => true
    }
    date {
      match => [ "fec_operacion", "yyyy-MM-dd' 'HH:mm:ss" ]
      target => "fec_operacion"
    }
  }
  # parsing csv with any other structure in the folder /csvtoparse/
  else {
    mutate {
      #gsub => [ 'message', '\"', '' ]
      #      gsub => [ "message", "-", ""]
      #      gsub => [ "message", "\_", ""]
      #      gsub => [ "message", "\.", ""]
      #      gsub => [ "message", " ", ""]
      gsub => [ "message", "\#", ""]
      gsub => [ "message", "\?", ""]
      gsub => [ "message", "\<", ""]
      gsub => [ "message", "\>", ""]
      gsub => [ "message", "\|", ""]
      #      gsub => [ "message", '\\\', "..."]
      #gsub => [ "message", "\/", ""]
    }
    csv {
      separator => ","
      autodetect_column_names => true
      #      autogenerate_column_names => true        # use only if csv file has some no titled columns
      skip_header => false
      skip_empty_columns => true
    }
    date {
      match => [ "fec_operacion", "yyyy-MM-dd' 'HH:mm:ss" ]
      target => "fec_operacion"
    }
  }
}

output {
  elasticsearch {
    hosts => "elasticsearch1:9200"
    index => "csv-%{nombreindex}"
    #      template => "./shards.json"
    #      template_name => "shards"
    #      template_overwrite => "false"
  }
}